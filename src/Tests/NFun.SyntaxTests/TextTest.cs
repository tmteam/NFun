using NFun.TestTools;
using NUnit.Framework;

namespace NFun.SyntaxTests;

[TestFixture]
public class TextTest {
    [TestCase("y = ''", "")]
    [TestCase("y = 'hi'", "hi")]
    [TestCase("y = 'World'", "World")]
    [TestCase("y = 'foo'.concat('bar')", "foobar")]
    [TestCase("y = 'foo'.reverse()", "oof")]
    [TestCase("y = ['bar'[1]]", "a")]
    [TestCase("y = 'bar'[1]", 'a')]
    [TestCase("y = '01234'[:]", "01234")]
    [TestCase("y = '01234'[2:4]", "234")]
    [TestCase("y = '01234'[1:1]", "1")]
    [TestCase("y = ''[0:0]", "")]
    [TestCase("y = ''[1:]", "")]
    [TestCase("y = ''[:1]", "")]
    [TestCase("y = ''[::1]", "")]
    [TestCase("y = ''[::3]", "")]
    [TestCase("y = '01234'[1:2]", "12")]
    [TestCase("y = '01234'[2:]", "234")]
    [TestCase("y = '01234'[::2]", "024")]
    [TestCase("y = '01234'[::1]", "01234")]
    [TestCase("y = '01234'[::]", "01234")]
    [TestCase("y = '0123456789'[2:9:3]", "258")]
    [TestCase("y = '0123456789'[1:8:2]", "1357")]
    [TestCase("y = '0123456789'[1:8:]", "12345678")]
    [TestCase("y = '0123456789'[1:8:] == '12345678'", true)]
    [TestCase("y = '0123456789'[1:8:] != '12345678'", false)]
    [TestCase("y = 'abc' == 'abc'", true)]
    [TestCase("y = 'abc' == 'cba'", false)]
    [TestCase("y = 'abc' == 'cba'.reverse()", true)]
    [TestCase("y = 'abc' == 'abc'.reverse()", false)]
    [TestCase("y = 'abc'.concat('def') == 'abcdef'", true)]
    [TestCase("y = 'abc'.concat('de') == 'abcdef'", false)]
    [TestCase("y = '{0}'", "0")]
    [TestCase("y = 'hi {42}'", "hi 42")]
    [TestCase("y = '{42}hi'", "42hi")]
    [TestCase("y =  ‘some \"figure\" quotes‘", "some \"figure\" quotes")]
    [TestCase("y =  “some \"figure\" quotes“", "some \"figure\" quotes")]
    [TestCase("y =  ‘some 'figure' quotes‘", "some 'figure' quotes")]
    [TestCase("y =  “some 'figure' quotes“", "some 'figure' quotes")]
    [TestCase("y = 'hello {42} world'", "hello 42 world")]
    [TestCase("y = 'hello {42+1} world'", "hello 43 world")]
    [TestCase("y = '{''}'", "")]
    [TestCase("y = 'hi {42} and {21}'", "hi 42 and 21")]
    [TestCase("y = 'hi {42+13} and {21-1}'", "hi 55 and 20")]
    [TestCase("y = '{0+1} {1+2} {2+3}'", "1 3 5")]
    [TestCase("y = 'pre {'p{42-1*2}m{21-1+10*3}a'} mid {'p{42-2}m{21-1}a'} fin'", "pre p40m50a mid p40m20a fin")]
    [TestCase("y = 'pre \"{'p\"{42-1*2}\"m{21-1+10*3}a\"'} mid\" {'p{42-2}\"m{21-1}a'}\"fin\"'",
        "pre \"p\"40\"m50a\" mid\" p40\"m20a\"fin\"")]
    [TestCase("y = \"pre {\"p{42-1*2}m{21-1+10*3}a\"} mid {\"p{42-2}m{21-1}a\"} fin\"", "pre p40m50a mid p40m20a fin")]
    [TestCase("y = \"pre4' '{\"'p'{42-1*2}'m'{21-1+10*3}'a'\"}'m'i'd'{\"'p'{42-2}'m'{21-1}'a'\"}''fin'\"",
        "pre4' ''p'40'm'50'a''m'i'd''p'40'm'20'a'''fin'")]
    [TestCase("y = 'pre1{'pre2{2-2}after2'}after1'", "pre1pre20after2after1")]
    [TestCase("y = 'pre1 {'inside'} after1'", "pre1 inside after1")]
    [TestCase("y = 'pre'.concat((1+2).toText())", "pre3")]
    [TestCase("y = 'ab'.concat(toText(1+2))", "ab3")]
    [TestCase("y = 'a b '.concat(toText(1+2)).split(' ')", new[] { "a", "b", "3" })]
    [TestCase("y = 'a b '.concat((1+2).toText()).split(' ')", new[] { "a", "b", "3" })]
    [TestCase("y = 'a b c'.split(' ')", new[] { "a", "b", "c" })]
    [TestCase("y = 'a b '.concat('c').split(' ')", new[] { "a", "b", "c" })]
    [TestCase("y = 'a b '.split('')", new[] { "a", " ", "b", " "})]
    [TestCase("y = ''.toUpper()", "")]
    [TestCase("y = 'abcDEF'.toUpper()", "ABCDEF")]
    [TestCase("y = ''.toLower()", "")]
    [TestCase("y = 'abcDEF'.toLower()", "abcdef")]

    [TestCase("y = '  padded  '.trim()", "padded")]
    [TestCase("y = '  padded  '.trimStart()", "padded  ")]
    [TestCase("y = '  padded  '.trimEnd()", "  padded")]

    [TestCase("y = ['a','b','c'].join(',')", "a,b,c")]
    [TestCase("y = ['a','b','c'].join('')", "abc")]
    [TestCase("y = [].join(',')", "")]
    [TestCase("y = [''].join(',')", "")]

    [TestCase("y = 'a,b,c'.split(',')", new[] { "a", "b", "c" })]
    [TestCase("y = 'a,,c'.split(',')", new[] { "a", "c" })]  // removeEmptyEntries
    [TestCase("y = 'a b c'.split(' ')", new[] { "a", "b", "c" })]
    [TestCase("y = 'abc'.split('')", new[] { "a", "b", "c" })]
    [TestCase("y = ''.split(',')", new string[0])]
    public void TextConstantEquation(string expr, object expected) => expr.AssertReturns(expected);

    [TestCase(42, "y = x.toText().concat('lalala')", "42lalala")]
    [TestCase(42.0, "y = 'pre{x-1*2}mid{x*x/x}fin'", "pre40mid42fin")]
    [TestCase(42, "x:int; y = 'pre{x-1*2}mid{x*x/x}fin'", "pre40mid42fin")]
    [TestCase("abc", "y:text = concat(x,x)", "abcabc")]
    public void SingleVariableEquation(object input, string expr, object expected) =>
        expr.Calc("x", input).AssertReturns(expected);

    [TestCase("y='  \\\\'", "  \\")]
    [TestCase("y='\\t'", "\t")]
    [TestCase("y='\\n'", "\n")]
    [TestCase("y='\\''", "'")]
    [TestCase("y='\\r'", "\r")]
    [TestCase("y='\\\"'", "\"")]
    [TestCase("y='\\\\'", "\\")]
    [TestCase("y='e\\''", "e'")]
    [TestCase("y='#\\r'", "#\r")]
    [TestCase("y=' \\r\r'", " \r\r")]
    [TestCase("y='\\r\r'", "\r\r")]
    [TestCase("y='  \\\\  '", "  \\  ")]
    [TestCase("y='John: \\'fuck you!\\', he stops.'", "John: 'fuck you!', he stops.")]
    [TestCase("y='w\\t'", "w\t")]
    [TestCase("y='w\\\\\\t'", "w\\\t")]
    [TestCase("y='q\\t'", "q\t")]
    [TestCase("y='w\\\"'", "w\"")]
    [TestCase("y=' \\r'", " \r")]
    [TestCase("y='\t \\n'", "\t \n")]
    [TestCase("y='q\\tg'", "q\tg")]
    [TestCase("y='e\\\\mm\\''", "e\\mm'")]
    [TestCase("y=' \\r\r'", " \r\r")]
    [TestCase("y='\t \\n\n'", "\t \n\n")]
    [TestCase("y='pre \\{lalala\\} after'", "pre {lalala} after")]
    [TestCase("y='hello1\"{0}world'", "hello1\"0world")]
    [TestCase("y='hello2{0}\"world'", "hello20\"world")]
    [TestCase("y='hello3{0}\"world{0}'", "hello30\"world0")]
    [TestCase("y=\"hello4'{0}world\"", "hello4'0world")]
    [TestCase("y=\"hello5{0}'world\"", "hello50'world")]
    [TestCase("y=\"hello6{0}'world{0}\"", "hello60'world0")]
    public void EscapedTest(string expr, string expected) => expr.AssertReturns(expected);

    [Test]
    public void RepeatConcatTest() {
        var expression = "out:text = name.repeat(count).flat()";
        Funny.Hardcore.Build(expression).Calc(("count", 3), ("name", "foo")).AssertReturns("foofoofoo");
    }

    [Test]
    public void RepeatConcatTest2() {
        var expression = "if (count>0) name.repeat(count).flat() else 'none'";
        Funny.Hardcore.Build(expression).Calc(("count", 3), ("name", "foo")).AssertReturns("foofoofoo");
    }

    [TestCase("'avatar'.reverse() >  reverse('avatar') ", false)]
    [TestCase("('avatar'.reverse()) >  reverse('avatar') ", false)]
    [TestCase("'avatar'.reverse() <  'avatar'", false)]
    public void ConstantEquation(string expr, bool expected)
        => expr.AssertReturns("out", expected);


    [TestCase("y='hell")]
    [TestCase("y=hell'")]
    [TestCase("y='")]
    [TestCase("y = '")]
    [TestCase("'\\'")]
    [TestCase("'some\\'")]
    [TestCase("'\\GGG'")]
    [TestCase("'\\q'")]
    [TestCase("y = 'hi'+5")]
    [TestCase("y = ''+10")]
    [TestCase("y = ''+true")]
    [TestCase("y = 'hi'+5+true")]
    [TestCase("y = 'hi'+' '+'world'")]
    [TestCase("y = 'arr: '+ [1,2,3]")]
    [TestCase("y = 'arr: '+ [[1,2],[3]]")]
    [TestCase("y='hello'world'")]
    [TestCase("y='hello''world'")]
    [TestCase("y='hello{}world'")]
    [TestCase("y='hello'{0}world'")]
    [TestCase("y='hello{0}'world'")]
    [TestCase("y='hello{0}world'{0}'")]
    [TestCase("y='hello{0}world{0}''")]
    [TestCase("y='hello{0}world{0}")]
    [TestCase("y='hello{{0}world{0}'")]
    [TestCase("y='hello{0{}world{0}'")]
    [TestCase("y='hello{0}world{{0}'")]
    [TestCase("y='hello{0}world{0{}'")]
    [TestCase("y='hello{'i'{0}}world{{0}'")]
    [TestCase("y='hello{{0}'i'}world{{0}'")]
    [TestCase("y={0}'hello'world'")]
    [TestCase("y='pre {0}''fin'")]
    [TestCase("y='pre {0}''mid{1}fin'")]
    [TestCase("y='hello3{0}\"world{0}\"")]
    [TestCase("y='hello3{0}\"world{0'")]
    [TestCase("y =  ‘some \"figure\" quotes\"")]
    [TestCase("y =  “some \"figure\" quotes'")]
    [TestCase("y =  ‘some \'figure\' quotes“")]
    [TestCase("y =  “some \'figure\' quotes‘")]
    public void ObviousFails(string expr) => expr.AssertObviousFailsOnParse();
}
