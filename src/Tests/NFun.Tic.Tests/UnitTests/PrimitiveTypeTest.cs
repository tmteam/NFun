using NFun.Tic.SolvingStates;
using NUnit.Framework;

namespace NFun.Tic.Tests.UnitTests;

using static PrimitiveTypeName;

public class PrimitiveTypeTest {
    [TestCase(Any)]
    [TestCase(Bool)]
    [TestCase(Char)]
    [TestCase(Ip)]
    [TestCase(I16)]
    [TestCase(I24)]
    [TestCase(I32)]
    [TestCase(I48)]
    [TestCase(I64)]
    [TestCase(I96)]
    [TestCase(U8)]
    [TestCase(U12)]
    [TestCase(U16)]
    [TestCase(U24)]
    [TestCase(U32)]
    [TestCase(U48)]
    [TestCase(U64)]
    public void GetLastCommonAncestorToSelfReturnsSelf(PrimitiveTypeName type) {
        var result = new StatePrimitive(type).GetLastCommonPrimitiveAncestor(new StatePrimitive(type)).Name;
        Assert.AreEqual(type, result);
    }

    [TestCase(Any)]
    [TestCase(Bool)]
    [TestCase(Char)]
    [TestCase(I16)]
    [TestCase(I24)]
    [TestCase(I32)]
    [TestCase(I48)]
    [TestCase(I64)]
    [TestCase(I96)]
    [TestCase(U8)]
    [TestCase(U12)]
    [TestCase(U16)]
    [TestCase(U24)]
    [TestCase(U32)]
    [TestCase(U48)]
    [TestCase(U64)]
    public void GetLastCommonAncestorToAnyReturnsAny(PrimitiveTypeName type) {
        var result = new StatePrimitive(type).GetLastCommonPrimitiveAncestor(StatePrimitive.Any);
        Assert.AreEqual(StatePrimitive.Any, result);
    }

    [TestCase(Char, Bool, Any)]
    [TestCase(Char, Real, Any)]
    [TestCase(Char, I96, Any)]
    [TestCase(Char, I64, Any)]
    [TestCase(Char, I48, Any)]
    [TestCase(Char, I32, Any)]
    [TestCase(Char, I24, Any)]
    [TestCase(Char, I16, Any)]
    [TestCase(Char, U64, Any)]
    [TestCase(Char, U48, Any)]
    [TestCase(Char, U32, Any)]
    [TestCase(Char, U24, Any)]
    [TestCase(Char, U16, Any)]
    [TestCase(Char, U12, Any)]
    [TestCase(Char, U8, Any)]
    [TestCase(Bool, Real, Any)]
    [TestCase(Bool, I96, Any)]
    [TestCase(Bool, I64, Any)]
    [TestCase(Bool, I48, Any)]
    [TestCase(Bool, I32, Any)]
    [TestCase(Bool, I24, Any)]
    [TestCase(Bool, I16, Any)]
    [TestCase(Bool, U64, Any)]
    [TestCase(Bool, U48, Any)]
    [TestCase(Bool, U32, Any)]
    [TestCase(Bool, U24, Any)]
    [TestCase(Bool, U16, Any)]
    [TestCase(Bool, U12, Any)]
    [TestCase(Bool, U8, Any)]
    [TestCase(Real, I96, Real)]
    [TestCase(Real, I64, Real)]
    [TestCase(Real, I48, Real)]
    [TestCase(Real, I32, Real)]
    [TestCase(Real, I24, Real)]
    [TestCase(Real, I16, Real)]
    [TestCase(Real, U64, Real)]
    [TestCase(Real, U48, Real)]
    [TestCase(Real, U32, Real)]
    [TestCase(Real, U24, Real)]
    [TestCase(Real, U16, Real)]
    [TestCase(Real, U12, Real)]
    [TestCase(Real, U8, Real)]
    [TestCase(I96, I64, I96)]
    [TestCase(I96, I48, I96)]
    [TestCase(I96, I32, I96)]
    [TestCase(I96, I24, I96)]
    [TestCase(I96, I16, I96)]
    [TestCase(I96, U64, I96)]
    [TestCase(I96, U48, I96)]
    [TestCase(I96, U32, I96)]
    [TestCase(I96, U24, I96)]
    [TestCase(I96, U16, I96)]
    [TestCase(I96, U12, I96)]
    [TestCase(I96, U8, I96)]
    [TestCase(I64, I48, I64)]
    [TestCase(I64, I32, I64)]
    [TestCase(I64, I24, I64)]
    [TestCase(I64, I16, I64)]
    [TestCase(I64, U64, I96)]
    [TestCase(I64, U48, I64)]
    [TestCase(I64, U32, I64)]
    [TestCase(I64, U24, I64)]
    [TestCase(I64, U16, I64)]
    [TestCase(I64, U12, I64)]
    [TestCase(I64, U8, I64)]
    [TestCase(I48, I32, I48)]
    [TestCase(I48, I24, I48)]
    [TestCase(I48, I16, I48)]
    [TestCase(I48, U64, I96)]
    [TestCase(I48, U48, I64)]
    [TestCase(I48, U32, I48)]
    [TestCase(I48, U24, I48)]
    [TestCase(I48, U16, I48)]
    [TestCase(I48, U12, I48)]
    [TestCase(I48, U8, I48)]
    [TestCase(I32, I24, I32)]
    [TestCase(I32, I16, I32)]
    [TestCase(I32, U64, I96)]
    [TestCase(I32, U48, I64)]
    [TestCase(I32, U32, I48)]
    [TestCase(I32, U24, I32)]
    [TestCase(I32, U16, I32)]
    [TestCase(I32, U12, I32)]
    [TestCase(I32, U8, I32)]
    [TestCase(I24, I16, I24)]
    [TestCase(I24, U64, I96)]
    [TestCase(I24, U48, I64)]
    [TestCase(I24, U32, I48)]
    [TestCase(I24, U24, I32)]
    [TestCase(I24, U16, I24)]
    [TestCase(I24, U12, I24)]
    [TestCase(I24, U8, I24)]
    [TestCase(I16, U64, I96)]
    [TestCase(I16, U48, I64)]
    [TestCase(I16, U32, I48)]
    [TestCase(I16, U24, I32)]
    [TestCase(I16, U16, I24)]
    [TestCase(I16, U12, I16)]
    [TestCase(I16, U8, I16)]
    [TestCase(U64, U48, U64)]
    [TestCase(U64, U32, U64)]
    [TestCase(U64, U24, U64)]
    [TestCase(U64, U16, U64)]
    [TestCase(U64, U12, U64)]
    [TestCase(U64, U8, U64)]
    [TestCase(U48, U32, U48)]
    [TestCase(U48, U24, U48)]
    [TestCase(U48, U16, U48)]
    [TestCase(U48, U12, U48)]
    [TestCase(U48, U8, U48)]
    [TestCase(U32, U24, U32)]
    [TestCase(U32, U16, U32)]
    [TestCase(U32, U12, U32)]
    [TestCase(U32, U8, U32)]
    [TestCase(U24, U16, U24)]
    [TestCase(U24, U12, U24)]
    [TestCase(U24, U8, U24)]
    [TestCase(U16, U12, U16)]
    [TestCase(U16, U8, U16)]
    [TestCase(U12, U8, U12)]
    public void GetLastCommonAncestor(PrimitiveTypeName a, PrimitiveTypeName b, PrimitiveTypeName expected) {
        var result = new StatePrimitive(a).GetLastCommonPrimitiveAncestor(new StatePrimitive(b)).Name;
        Assert.AreEqual(expected, result);
        var revresult = new StatePrimitive(b).GetLastCommonPrimitiveAncestor(new StatePrimitive(a)).Name;
        Assert.AreEqual(expected, revresult);
    }

    [TestCase(Any)]
    [TestCase(Bool)]
    [TestCase(Char)]
    [TestCase(Ip)]
    [TestCase(I16)]
    [TestCase(I24)]
    [TestCase(I32)]
    [TestCase(I48)]
    [TestCase(I64)]
    [TestCase(I96)]
    [TestCase(U8)]
    [TestCase(U12)]
    [TestCase(U16)]
    [TestCase(U24)]
    [TestCase(U32)]
    [TestCase(U48)]
    [TestCase(U64)]
    public void GetFirstCommonDescendantToSelfReturnsSelf(PrimitiveTypeName type) {
        var result = new StatePrimitive(type).GetFirstCommonDescendantOrNull(new StatePrimitive(type)).Name;
        Assert.AreEqual(type, result);
    }

    [TestCase(Any)]
    [TestCase(Bool)]
    [TestCase(Char)]
    [TestCase(Ip)]
    [TestCase(I16)]
    [TestCase(I24)]
    [TestCase(I32)]
    [TestCase(I48)]
    [TestCase(I64)]
    [TestCase(I96)]
    [TestCase(U8)]
    [TestCase(U12)]
    [TestCase(U16)]
    [TestCase(U24)]
    [TestCase(U32)]
    [TestCase(U48)]
    [TestCase(U64)]
    public void GetFirstCommonDescendantToAnyReturnsSelf(PrimitiveTypeName type) {
        var result = new StatePrimitive(type).GetFirstCommonDescendantOrNull(StatePrimitive.Any).Name;
        Assert.AreEqual(type, result);
        var reversed = StatePrimitive.Any.GetFirstCommonDescendantOrNull(new StatePrimitive(type)).Name;
        Assert.AreEqual(type, reversed);
    }


    [TestCase(Real, Char)]
    [TestCase(Bool, Char)]
    [TestCase(I96, Char)]
    [TestCase(I64, Char)]
    [TestCase(I48, Char)]
    [TestCase(I32, Char)]
    [TestCase(I24, Char)]
    [TestCase(I16, Char)]
    [TestCase(U64, Char)]
    [TestCase(U48, Char)]
    [TestCase(U32, Char)]
    [TestCase(U24, Char)]
    [TestCase(U16, Char)]
    [TestCase(U12, Char)]
    [TestCase(U8, Char)]
    [TestCase(Real, Bool)]
    [TestCase(Char, Bool)]
    [TestCase(I96, Bool)]
    [TestCase(I64, Bool)]
    [TestCase(I48, Bool)]
    [TestCase(I32, Bool)]
    [TestCase(I24, Bool)]
    [TestCase(I16, Bool)]
    [TestCase(U64, Bool)]
    [TestCase(U48, Bool)]
    [TestCase(U32, Bool)]
    [TestCase(U24, Bool)]
    [TestCase(U16, Bool)]
    [TestCase(U12, Bool)]
    [TestCase(U8, Bool)]
    public void GetFirstCommonDescendant_returnsNull(PrimitiveTypeName a, PrimitiveTypeName b) {
        var result = new StatePrimitive(a).GetFirstCommonDescendantOrNull(new StatePrimitive(b));
        Assert.IsNull(result);
        var revresult = new StatePrimitive(b).GetFirstCommonDescendantOrNull(new StatePrimitive(a));
        Assert.IsNull(revresult);
    }


    [TestCase(Real, I96, I96)]
    [TestCase(Real, I64, I64)]
    [TestCase(Real, I48, I48)]
    [TestCase(Real, I32, I32)]
    [TestCase(Real, I24, I24)]
    [TestCase(Real, I16, I16)]
    [TestCase(Real, U64, U64)]
    [TestCase(Real, U48, U48)]
    [TestCase(Real, U32, U32)]
    [TestCase(Real, U24, U24)]
    [TestCase(Real, U16, U16)]
    [TestCase(Real, U12, U12)]
    [TestCase(Real, U8, U8)]
    [TestCase(I96, I64, I64)]
    [TestCase(I96, I48, I48)]
    [TestCase(I96, I32, I32)]
    [TestCase(I96, I24, I24)]
    [TestCase(I96, I16, I16)]
    [TestCase(I96, U64, U64)]
    [TestCase(I96, U48, U48)]
    [TestCase(I96, U32, U32)]
    [TestCase(I96, U24, U24)]
    [TestCase(I96, U16, U16)]
    [TestCase(I96, U12, U12)]
    [TestCase(I96, U8, U8)]
    [TestCase(I64, I48, I48)]
    [TestCase(I64, I32, I32)]
    [TestCase(I64, I24, I24)]
    [TestCase(I64, I16, I16)]
    [TestCase(I64, U64, U48)]
    [TestCase(I64, U48, U48)]
    [TestCase(I64, U32, U32)]
    [TestCase(I64, U24, U24)]
    [TestCase(I64, U16, U16)]
    [TestCase(I64, U12, U12)]
    [TestCase(I64, U8, U8)]
    [TestCase(I48, I32, I32)]
    [TestCase(I48, I24, I24)]
    [TestCase(I48, I16, I16)]
    [TestCase(I48, U64, U32)]
    [TestCase(I48, U48, U32)]
    [TestCase(I48, U32, U32)]
    [TestCase(I48, U24, U24)]
    [TestCase(I48, U16, U16)]
    [TestCase(I48, U12, U12)]
    [TestCase(I48, U8, U8)]
    [TestCase(I32, I24, I24)]
    [TestCase(I32, I16, I16)]
    [TestCase(I32, U64, U24)]
    [TestCase(I32, U48, U24)]
    [TestCase(I32, U32, U24)]
    [TestCase(I32, U24, U24)]
    [TestCase(I32, U16, U16)]
    [TestCase(I32, U12, U12)]
    [TestCase(I32, U8, U8)]
    [TestCase(I24, I16, I16)]
    [TestCase(I24, U64, U16)]
    [TestCase(I24, U48, U16)]
    [TestCase(I24, U32, U16)]
    [TestCase(I24, U24, U16)]
    [TestCase(I24, U16, U16)]
    [TestCase(I24, U12, U12)]
    [TestCase(I24, U8, U8)]
    [TestCase(I16, U64, U12)]
    [TestCase(I16, U48, U12)]
    [TestCase(I16, U32, U12)]
    [TestCase(I16, U24, U12)]
    [TestCase(I16, U16, U12)]
    [TestCase(I16, U12, U12)]
    [TestCase(I16, U8, U8)]
    [TestCase(U64, U48, U48)]
    [TestCase(U64, U32, U32)]
    [TestCase(U64, U24, U24)]
    [TestCase(U64, U16, U16)]
    [TestCase(U64, U12, U12)]
    [TestCase(U64, U8, U8)]
    [TestCase(U48, U32, U32)]
    [TestCase(U48, U24, U24)]
    [TestCase(U48, U16, U16)]
    [TestCase(U48, U12, U12)]
    [TestCase(U48, U8, U8)]
    [TestCase(U32, U24, U24)]
    [TestCase(U32, U16, U16)]
    [TestCase(U32, U12, U12)]
    [TestCase(U32, U8, U8)]
    [TestCase(U24, U16, U16)]
    [TestCase(U24, U12, U12)]
    [TestCase(U24, U8, U8)]
    [TestCase(U16, U12, U12)]
    [TestCase(U16, U8, U8)]
    [TestCase(U12, U8, U8)]
    public void GetFirstCommonDescendant(PrimitiveTypeName a, PrimitiveTypeName b, PrimitiveTypeName expected) {
        var result = new StatePrimitive(a).GetFirstCommonDescendantOrNull(new StatePrimitive(b))?.Name;
        Assert.AreEqual(expected, result);
        var revresult = new StatePrimitive(b).GetFirstCommonDescendantOrNull(new StatePrimitive(a))?.Name;
        Assert.AreEqual(expected, revresult);
    }

    [TestCase(Real, Real)]
    [TestCase(I32, Real)]
    [TestCase(U24, Real)]
    [TestCase(I64, Real)]
    [TestCase(U64, Real)]
    [TestCase(U8, Real)]
    [TestCase(Real, Any)]
    [TestCase(I32, I96)]
    [TestCase(U24, I96)]
    [TestCase(I64, I96)]
    [TestCase(U64, I96)]
    [TestCase(U8, I96)]
    [TestCase(U24, U64)]
    [TestCase(U64, U64)]
    [TestCase(U8, U64)]
    [TestCase(Char, Any)]
    public void CanBeImplicitlyConverted_returnsTrue(PrimitiveTypeName from, PrimitiveTypeName to) =>
        Assert.IsTrue(new StatePrimitive(from).CanBePessimisticConvertedTo(new StatePrimitive(to)));

    [TestCase(Real, U48)]
    [TestCase(I32, U64)]
    [TestCase(U24, I16)]
    [TestCase(I64, I32)]
    [TestCase(Real, I64)]
    [TestCase(I96, U48)]
    [TestCase(Any, Real)]
    [TestCase(I32, U12)]
    [TestCase(U24, U12)]
    [TestCase(I64, I24)]
    [TestCase(U64, I16)]
    [TestCase(Char, Bool)]
    public void CanBeImplicitlyConverted_returnsFalse(PrimitiveTypeName from, PrimitiveTypeName to) =>
        Assert.IsFalse(new StatePrimitive(from).CanBePessimisticConvertedTo(new StatePrimitive(to)));
}
